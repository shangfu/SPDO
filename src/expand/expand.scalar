 def expandoracle(code: Long, dep: Int): List[Long] = {
 	val a = new ListBuffer[Long]()
 	var i = 0
	for (i<-5 to (dep-2)) {
	 	a+= (code >> ((dep-i)*4) << 4) + i
	 }
	return a.toList
 }
  
val oracle0 = sc.textFile("oracles.out").map(line => ( ( line.split(" ")(0).toLong, line.split(" ")(2).toByte), line.split(" ")(1).toDouble) )
 
val oracle1 = oracle0.flatMap( x => expandoracle(x._1._1, x._1._2)).distinct()

val oracle2 = oracle1.map(x => (x, 0.0))

val oracle  = sc.textFile("oracles.out").map(line => ( line.split(" ")(0).toLong, line.split(" ")(1).toDouble) ).union(oracle2)

oracle.saveAsSequenceFile("sparkoracle/")


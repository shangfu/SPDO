import org.apache.spark.HashPartitioner
import scala.collection.mutable.HashMap
import edu.berkeley.cs.amplab.spark.indexedrdd.IndexedRDD
import scala.collection.mutable.ListBuffer



//===   only for NY 
val shiftbits = 22
val lowlat = 40300009
val lowlon = -74499998
val lowdepth = 4
val highdepth = 10

def z4(xx: Long, yy: Long): Long = {
        var x = xx>>shiftbits
        var y = yy>>shiftbits
     	x = (x | (x << 16)) & 0x0000ffff0000ffffL
     	x = (x | (x << 8)) &  0x00ff00ff00ff00ffL
     	x = (x | (x << 4)) &  0x0f0f0f0f0f0f0f0fL
     	x = (x | (x << 2)) &  0x3333333333333333L
     	y = (y | (y << 16)) & 0x0000ffff0000ffffL
     	y = (y | (y << 8)) &  0x00ff00ff00ff00ffL
     	y = (y | (y << 4)) &  0x0f0f0f0f0f0f0f0fL
     	y = (y | (y << 2)) &  0x3333333333333333L
     	if (x>y) {
     		return (y << 2) | x
     	}else {
     		return (x << 2) | y
     	}
}

def z2(lat: Double, lon: Double): Long = {
        var y = ((lat*1000000).toLong - lowlat) * 2
        var x = (lon*1000000).toLong - lowlon
     	x = (x | (x << 16)) & 0x0000ffff0000ffffL
     	x = (x | (x << 8)) &  0x00ff00ff00ff00ffL
     	x = (x | (x << 4)) &  0x0f0f0f0f0f0f0f0fL
     	x = (x | (x << 2)) &  0x3333333333333333L
     	x = (x | (x << 1)) &  0x5555555555555555L
     	
     	y = (y | (y << 16)) & 0x0000ffff0000ffffL
     	y = (y | (y << 8)) &  0x00ff00ff00ff00ffL
     	y = (y | (y << 4)) &  0x0f0f0f0f0f0f0f0fL
     	y = (y | (y << 2)) &  0x3333333333333333L
     	y = (y | (y << 1)) &  0x5555555555555555L
     	
     	return (x<<1) | y
}

def zz4(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Long = { 
	return z4(z2(lat1,lon1), z2(lat2,lon2))
}

def genKeys(code: Long): Array[Long] = {
	val a = new ListBuffer[Long]()
	var i = 0
	for (i<- lowdepth to highdepth) {
		a+=(code>>((highdepth-i)*4)<<4)+i
	}
	return a.toArray
}

def getDistanceNavie( pairs: Array[(Double, Double, Double, Double)], lowD: Int, highD: Int): Array[Double] = {
 	val code = new Array[Long](pairs.length*(highD-lowD+1))
 	var x = (0.0,0.0,0.0,0.0)
 	var i = 0
 	var j = 0
 	var idx = 0
 	var temp: Long = 0
 	for (i<-0 until pairs.length){
 		x = pairs(i)
 		temp = zz4(x._1,x._2,x._3,x._4)
 		for (j<- lowD to highD) {
 			code(idx) = (temp >> ((10-j)*4) << 4)+ j
 			idx+=1
 		}
 	}
	val res = Array.fill[Double](pairs.length)(0.0)
	val restemp = hashpair_ac.multiget(code)
	idx=0
	var flag:Boolean = false
	for (i<-0 until pairs.length){
		flag=false
 		for (j<- lowD to highD) {
 			if (!flag && restemp.contains(code(idx))) {
 				res(i) = restemp(code(idx))
 				flag=true
 			}
 			idx+=1
 		}
 	}
    return res
 }
